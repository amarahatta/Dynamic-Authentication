import React, { useState, useEffect } from 'react';
import { Text, View, StyleSheet } from 'react-native';
import { GoogleGenerativeAI } from '@google/generative-ai';
//aimport { AI_KEY } from '@env';
import Constants from 'expo-constants';

const QuestionComponent = ({ setQuestion }) => {
  const geminiKey = Constants.expoConfig?.extra?.GEMINI_API_KEY;
  const [response, setResponse] = useState("");
  const genAI = new GoogleGenerativeAI(geminiKey);
  const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

  const getResponse = async () => { 
    try {
      const result = await model.generateContent("Give me a easy math problem to solve.");
      const responseText = await result.response;
      setResponse(responseText.text()); // The question generated by Gemini
      setQuestion(responseText.text()); // Pass the generated question to the parent component
    } catch (error) {
      console.error("Error:", error);
      setResponse("Error generating response.");
    }
  };

  useEffect(() => {
    getResponse();
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.questionText}>{response}</Text>
    </View>
  );
};

export default QuestionComponent;

const styles = StyleSheet.create({
  container: {
    alignContent: 'center',
    alignItems: 'center',
    backgroundColor: '#000000',
    marginHorizontal: 20,
    padding: 20,
    borderRadius: 8,
  },
  questionText: {
    fontFamily: 'Poppins',
    color: '#FFFFFF',
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 12,
    lineHeight: 32,
    textAlign: 'center',
  },
});
